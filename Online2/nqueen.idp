vocabulary V {
    type Index := {1..5}
    type solution := {s1,s2} // aantal solutions  n = 2 
    //type solution := {s1}
    queen : solution * Index * Index -> Bool
    distance: solution * solution -> Int
    k: () -> Int
    n: () -> Int


}

structure S:V {
    n := 5.
}

theory T:V {
    //Queens bij n=7:
    //queen(s1, 1, 4) & queen(s1, 2, 1) & queen(s1, 3, 5) & queen(s1, 4, 2) & queen(s1, 5, 6) & queen(s1, 6, 3) & queen(s1, 7, 7).
    
    //Queens bij n=5
    queen(s1,1, 4) & queen(s1,2, 1) & queen(s1,3, 3) & queen(s1,4, 5) & queen(s1,5, 2).

    !s in solution: !x,y,u,v in Index: queen(s,x,y) & queen(s,u,v) & x~=u & y~=v  => (v ~= -u + x + y).
    !s in solution: !x,y,u,v in Index: queen(s,x,y) & queen(s,u,v) & x~=u & y~=v => (v ~= u - x + y).
    !s in solution: !x,y,u,v in Index: queen(s,x,y) & queen(s,u,v) & y~=v => (x ~= u).
    !s in solution: !x,y,u,v in Index: queen(s,x,y) & queen(s,u,v) & x~=u => (y ~= v).
    
    !s in solution: #{x,y in Index : queen(s,x,y)} = n().
    
    !sx,sy in solution: distance(sx,sy) = #{x,y in Index: queen(sx,x,y) ~= queen(sy,x,y)}/2.
    k() =< sum{{distance(sx,sy) | sx,sy in solution: sx ~= sy }}/2.

    k() = 0.
}

procedure main() {
    pretty_print(model_expand(T, S,max=100))
}
